# Main program
curie_demos:
  # run mode
  display_disjoint_sets: false
  run_problems: true  # just load/generate database
  check_valid_vertices: false
  create_spars: true
  eliminate_dense_disjoint_sets: false
  # run type
  planning_runs: 10
  problem_type: 0 # 0 - random, 1 - imarkers
  auto_run: true # do not wait to move interactive markers
  experience_planner: bolt
  planning_group_name: both_arms
  #planning_group_name: right_arm
  use_task_planning: false  # cartesian hybrid planning
  post_processing: false
  post_processing_interval: 20 # how often (in runs) to adjust the graphs
  seed_random: true
  visualize:
    display_database: false # does not display database as it is built, however
    start_goal_states: false
    interpolated_traj: true
    time_between_plans: 1
    database_every_plan: false
  debug:
    print_trajectory: false
    verbose: false

# ====================================================
discretizer:
  discretization: 2 #0.5235 # -3.14 to 3.15
  visualize:
    grid_generation: false # if discretizing from scratch, visualize

# ====================================================
dense_db:
  desired_average_cost: 90 # most things are of low value
  save_database: true
  popularity_bias_enabled: true
  popularity_bias: 5 # how much popularity (0-100) affects the edge weights
  debug:
    snap_path_verbose: false
  visualize:
    cart_path: true
    cart_neighbors: true
    snap_path: false # show the insertion of a smoothed path into the dense graph as popularity
    snap_path_speed: 1 # how many seconds to wait between each visualization
    astar: false # NOTE THIS ASTAR IS NOT USED ANYMORE show node expansions and openings
    astar_speed: 0.01 # how many seconds to wait between each visualization
    add_sample: false
    database_vertices: true
    database_edges: false

# ====================================================
sparse_db:
  sparse_delta_fraction: 3
  dense_delta: 0.05
  sparse_creation_insertion_order: 2 # 0 - popularity, 1 - default, 2 - random
  percent_max_extent_underestimate: 1.5 # 0 to 1
  testing_bool: true # save to file
  debug:
    checks_verbose: false
  visualize:
    spars_graph: false
    spars_graph_speed: 0 # if 0, does not animate but only single image draw
    database_vertices: true
    database_edges: true
    dense_representatives: false
    astar: false # show node expansions and openings
    astar_speed: 0.1 # how many seconds to wait between each vertex
    node_popularity: false

# ====================================================
bolt_retrieve_repair:
  debug:
    verbose: false
  visualize:
    raw_trajectory: true

# ====================================================
# for ur5_demo_descartes/src/ur_moveit_plugin.cpp TODO: this is crappy code
arm_prefix: right_

# ====================================================
ur5_descartes_app:
  group_name: right_arm
  tip_link: right_gripper_target
  base_link: right_base_link
  world_frame: world
  trajectory:
    time_delay: 0.1
    foci_distance: 0.07
    radius: 0.097
    num_points: 200
    num_lemniscates: 4
    center: [0.6, -0.2, 0.2]
    seed_pose: [0.0, -1.7, 1.7 , 0.0, 1.5, 0.0]
  visualization:
    min_point_distance: 0.02
  controller_joint_names: [right_shoulder_pan_joint, right_shoulder_lift_joint, right_elbow_joint, right_wrist_1_joint, right_wrist_2_joint, right_wrist_3_joint]

# ====================================================
# Interface for publishing joint/cartesian commands to the low level controllers
execution_interface:
  command_mode: joint_publisher # method for publishing commands from this node to low level controller
  cartesian_command_topic: /hilgendorf/cartesian_controller/cartesian_command # command output from this node
  joint_trajectory_topic: /hilgendorf/cartesian_controller/command # command output from this node
  save_traj_to_file: false # debug mode for creating a CSV for use with Matlab
  save_traj_to_file_path: /home/dave/ros/current/ws_swri/src/trajectory_data/ # debug
  visualize_trajectory_line: false # show in RViz a series of markers visualizing path
  visualize_trajectory_path: false # show in RViz the robot moving on the trajectory path
  check_for_waypoint_jumps: false # ensure that any trajectory that is published does not have huge discontinuties in joint space

# MoveIt Boilerplate Base Functionality
moveit_base:
  joint_state_topic: /hilgendorf/joint_states # location to recieve updates of the robot's pose
  joint_model_group: whole_body # the main planning group to control
  planning_scene_topic: /swri/planning_scene  # topic for communicating the collision obj in the env with other nodes
  rviz:
    markers_topic: /hilgendorf/markers
    robot_state_topic: /hilgendorf/robot_state
    trajectory_topic: /hilgendorf/display_trajectory