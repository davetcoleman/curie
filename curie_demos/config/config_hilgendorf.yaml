# ====================================================
# Main program
curie_demos:
  # run mode
  benchmark_performance: false
  display_disjoint_sets: false
  eliminate_dense_disjoint_sets: false
  check_valid_vertices: false
  load_spars: true
  create_spars: true
  continue_spars: true # even if a file has been saved, randomly sample for more coverage
  run_problems: false # do plans?
  auto_run: true # do not wait to move interactive markers. note: 'autonomous' setting must be 'false'

  # run type
  headless: false
  planning_runs: 10
  problem_type: 1 # 0 - random, 1 - imarkers
  experience_planner: bolt
  #planning_group_name: right_arm
  #planning_group_name: two_dof
  #planning_group_name: three_dof
  planning_group_name: four_dof
  #planning_group_name: five_dof
  ee_tip_link: right_gripper_target
  use_task_planning: true  # cartesian hybrid planning
  post_processing: false
  post_processing_interval: 20 # how often (in runs) to adjust the graphs
  seed_random: true
  use_logging: false # write to file log info
  collision_checking_enabled: true
  visualize:
    display_database: false # does not display database as it is built, however
    start_goal_states: false
    interpolated_traj: false
    time_between_plans: 2
    database_every_plan: false
  verbose:
    print_trajectory: false
    verbose: false

# ====================================================
debug_interface:
  autonomous: true
  full_autonomous: false # TODO this is not used

# ====================================================
sparse_graph:
  save_enabled: true
  super_debug: false # run more checks and tests that slow down speed
  obstacle_clearance: 0.006 #0.0035 # max before gripper piece is in collision
  verbose:
    add: false # debug when addVertex() and addEdge() are called
  visualize:
    spars_graph: false
    spars_graph_speed: 0.00001 # if 0, does not animate but only single image draw
    database_vertices: true # must have spars_graph enabled
    database_edges: true # must have spars_graph enabled
    database_coverage: false # the grey circles around vertices, must have spars_graph enabled
    projection: true # show the joint space in a nD grid
    graph_after_loading: false
    quality_path_simp: false # simplification
    astar: true # show node expansions and openings
    astar_speed: 0.01 # how many seconds to wait between each visualization
    voronoi_diagram: false
    voronoi_diagram_animated: false

# ====================================================
sparse_criteria:
  #sparse_delta_fraction: 0.1 # for 6dof
  sparse_delta_fraction: 0.2 # for 12dof
  dense_delta_fraction: 0.01 #NOTE: this is not used anymore
  penetration_overlap_fraction: 0.1
  near_sample_points_multiple: 2 # multiply this times number of dimensions
  stretch_factor: 5 # 0 means auto set
  use_l2_norm: false # instead use L1
  use_edge_improvement_rule: true
  use_check_remove_close_vertices: true # Experimental feature that allows very closeby vertices to be merged with newly added ones
  use_clear_edges_near_vertex: true # When adding a quality vertex, remove nearby edges
  use_original_smoother: false # original is bad
  verbose:
    added_reason: false # print when adding vertices & edges, and the reason why
    criteria: false # all criteria except 4th (quality)
    quality: false # 4th criteria
    quality_max_spanner: false
    remove_close: false
  visualize:
    attempted_states: false # show the current sampled state before its added
    connectivity: false # show states in different connected components for connectivity criteria
    quality_criteria: false
    quality_criteria_close_reps: false # window 3
    quality_criteria_sampler: false
    quality_criteria_astar: false # show results of astar test
    remove_close_vertices: false

# ====================================================
sparse_generator:
  fourth_criteria_after_failures: 5000 # mode change to 4th criteria after this many failures
  terminate_after_failures: 5000 # total failures, including 4th criteria
  use_discretized_samples: true
  use_random_samples: true
  save_interval: 1000 # how often to save during random sampling

# ====================================================
vertex_discretizer:
  verbose:
    verbose: true
    thread: false # output within threading (very verbose)
  visualize:
    grid_generation: false
    grid_generation_wait: false

# ====================================================
task_graph:
  num_neighbors_connect_to_cart: 10
  verbose:
    add: false # debug when addVertex() and addEdge() are called
    search: true
    visualize: true
    verbose: true
    heuristic: false
    clear: false
    generate_task: false
  visualize:
    task_graph: false
    task_graph_speed: 0.001 # if 0, does not animate but only single image draw
    database_vertices: true
    database_edges: true
    astar: false # show node expansions and openings
    astar_speed: 0.01 # how many seconds to wait between each visualization

# ====================================================
dense_cache:
  disable_cache: false
  enable_cache_saving: false
  save_every_n_edges: 50000

# ====================================================
bolt_planner:
  verbose:
    verbose: false
  visualize:
    raw_trajectory: true

# ====================================================
bolt:
  visualize:
    raw_trajectory: true
    smooth_trajectory: true
    robot_trajectory: true

# ====================================================
# for ur5_demo_descartes/src/ur_moveit_plugin.cpp TODO: this is crappy code
arm_prefix: right_

# ====================================================
cart_path_planner:
  group_name: right_arm
  tip_link: right_gripper_target
  base_link: base_link
  world_frame: base_link # TODO it bothers me this is required
  descartes_check_collisions: false
  orientation_increment: 1 # in radians, discretization of space [-Pi, Pi]
  trajectory_discretization: 0.01 # how much space, in meters, between trajectory points
  timing: 0.5 # time between each Cartesian point, e.g. discretization

# ====================================================
# Interface for publishing joint/cartesian commands to the low level controllers
execution_interface:
  command_mode: joint_publisher # method for publishing commands from this node to low level controller
  cartesian_command_topic: /hilgendorf/cartesian_controller/cartesian_command # command output from this node
  joint_trajectory_topic: /hilgendorf/cartesian_controller/command # command output from this node
  save_traj_to_file: false # debug mode for creating a CSV for use with Matlab
  save_traj_to_file_path: /home/dave/ros/current/ws_swri/src/trajectory_data/ # debug
  visualize_trajectory_line: false # show in RViz a series of markers visualizing path
  visualize_trajectory_path: false # show in RViz the robot moving on the trajectory path
  check_for_waypoint_jumps: false # ensure that any trajectory that is published does not have huge discontinuties in joint space

# MoveIt Boilerplate Base Functionality
moveit_base:
  joint_state_topic: /hilgendorf/joint_states # location to recieve updates of the robot's pose
  joint_model_group: whole_body # the main planning group to control
  planning_scene_topic: /swri/planning_scene  # topic for communicating the collision obj in the env with other nodes
  rviz:
    markers_topic: /hilgendorf/markers
    robot_state_topic: /hilgendorf/robot_state
    trajectory_topic: /hilgendorf/display_trajectory